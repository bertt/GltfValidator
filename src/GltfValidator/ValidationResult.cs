using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace GltfValidator
{
    /// <summary>
    /// Represents the report generated by glTF validator.
    /// </summary>
    /// <remarks>
    /// <see href="https://github.com/KhronosGroup/glTF-Validator/blob/main/docs/validation.schema.json">Schema.</see>
    /// </remarks>    
    public sealed class ValidationReport
    {
        #region validation

        public static ValidationReport Validate(string filePath)
        {
            return gltf_validator.ValidateFile(filePath);
        }

        #endregion

        #region serialization

        public static ValidationReport Parse(string reportJson)
        {
            var options = new JsonSerializerOptions();
            options.PropertyNamingPolicy = JsonNamingPolicy.CamelCase;

            return JsonSerializer.Deserialize<ValidationReport>(reportJson, options);
        }

        public override string ToString()
        {
            var options = new JsonSerializerOptions();
            options.WriteIndented = true;
            options.PropertyNamingPolicy = JsonNamingPolicy.CamelCase;
            return JsonSerializer.Serialize(this, options);
        }

        #endregion

        #region properties

        public string Uri { get; set; }
        public string MimeType { get; set; }
        public string ValidatorVersion { get; set; }
        public string ValidatedAt { get; set; }
        public ValidationIssues Issues { get; set; }
        public ValidationInfo Info { get; set; }

        public bool UnsupportedExtensions => Messages.Any(item => item.Code == "UNSUPPORTED_EXTENSION");
        public bool HasWarnings => Issues.NumWarnings > 0;
        public bool HasErrors => Issues.NumErrors > 0;

        public IEnumerable<ValidationMessage> Messages => Issues.Messages == null
            ? Enumerable.Empty<ValidationMessage>()
            : Issues.Messages;

        public IEnumerable<String> Hints => Messages
            .Where(item => item.Severity == 3)
            .Select(item => item.Message);

        public IEnumerable<String> Infos => Messages
            .Where(item => item.Severity == 2)
            .Select(item => item.Message);

        public IEnumerable<String> Warnings => Messages
            .Where(item => item.Severity == 1)
            .Select(item => item.Message);

        public IEnumerable<String> Errors => Messages
            .Where(item => item.Severity == 0)
            .Select(item => item.Message);

        #endregion
    }

    [System.Diagnostics.DebuggerDisplay("⛔:{NumErrors} ⚠:{NumWarnings}")]
    public sealed class ValidationIssues
    {
        public int NumErrors { get; set; }
        public int NumWarnings { get; set; }
        public int NumInfos { get; set; }
        public int NumHints { get; set; }
        public ValidationMessage[] Messages { get; set; }
        public bool Truncated { get; set; }
    }

    public sealed class ValidationMessage
    {
        public string Code { get; set; }
        public string Message { get; set; }
        public int Severity { get; set; }
        public string Pointer { get; set; }
        public int? Offset { get; set; }
    }

    public sealed class ValidationInfo
    {
        public string Version { get; set; }
        public string MinVersion { get; set; }
        public string Generator { get; set; }
        public string[] ExtensionsUsed { get; set; }
        public string[] ExtensionsRequired { get; set; }
        public ValidationResources[] Resources { get; set; }
        public int AnimationCount { get; set; }
        public int MaterialCount { get; set; }
        public bool HasMorphTargets { get; set; }
        public bool HasSkins { get; set; }
        public bool HasTextures { get; set; }
        public bool HasDefaultScene { get; set; }
        public int DrawCallCount { get; set; }
        public int TotalVertexCount { get; set; }
        public int TotalTriangleCount { get; set; }
        public int MaxUVs { get; set; }
        public int MaxInfluences { get; set; }
        public int MaxAttributes { get; set; }
    }

    public sealed class ValidationResources
    {
        public string Pointer { get; set; }
        public string Storage { get; set; }
        public string MimeType { get; set; }
        public string Uri { get; set; }
        public int ByteLength { get; set; }
        public ValidationImage Image { get; set; }
    }

    public sealed class ValidationImage
    {
        public int Width { get; set; }
        public int Height { get; set; }
        public string Format { get; set; }
        public string Primaries { get; set; }
        public string Transfer { get; set; }
        public int Bits { get; set; }
    }
}
